{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["const SENTINEL = String.fromCharCode(0);\n\nexport type obj = Record<string, any>;\n\n/**\n * Class for a fast trie map.\n */\nexport class TrieMap<T> {\n  /**\n   * Creates a new instance from existing data.\n   *\n   * @param json - A JSON-string (a previously strinfified TrieMap instance).\n   *\n   * @example\n   * ```js\n   * const json = new TrieMap()\n   *   .set(['some', 'path'], 'value')\n   *   .toJson();\n   *\n   * const trie = Trie.fromJSON(json);\n   * ```\n   */\n  public static fromJSON<T>(json: string): TrieMap<T> {\n    return Object.setPrototypeOf(JSON.parse(json), this.prototype);\n  }\n\n  /**\n   * Creates a new instance from existing data.\n   *\n   * @param iterable - An interable that yields entries.\n   *\n   * @example\n   * ```js\n   * const trie = Trie.fromIterable([\n   *   [['some', 'path'], 'value1'],\n   *   [['other', 'path'], 'value2']\n   * ]);\n   * ```\n   */\n  public static fromIterable<T>(iterable: Iterable<[string[], T]>): TrieMap<T> {\n    const instance: TrieMap<T> = new this();\n    instance.load(iterable);\n    return instance;\n  }\n\n  /**\n   * The TrieMap data structure root.\n   */\n  public root: obj;\n\n  /**\n   * Creates a new TrieMap instance.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap();\n   * ```\n   */\n  public constructor() {\n    this.root = {};\n  }\n\n  /**\n   * Returns the number of values in the TrieMap.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap();\n   *\n   * trie.\n   *   .set(['some', 'path'], 'value')\n   *   .count;\n   * //=> 1\n   * ```\n   */\n  public get count(): number {\n    let c = 0;\n    this.forEach([], () => {\n      c++;\n    });\n    return c;\n  }\n\n  /**\n   * Ensures a string key of a string[] prefix is valid.\n   *\n   * @throws {Error} if illegal character encountered in prefix.\n   */\n  protected ensureValidKey(key: string): void {\n    // TODO why is key !== '0' necessary?\n    if (key === SENTINEL || key === '0') {\n      throw new Error(\n        'Prefix elements cannot be === to neither ' + SENTINEL + ' || \"0\".',\n      );\n    }\n  }\n\n  /**\n   * Deletes all entries from the TrieMap\n   *\n   * @returns this/self (chainable)\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap();\n   * trie.set(['some', 'path'], 'value');\n   * trie.clear();\n   * trie.count;\n   * //=> 0\n   * ```\n   */\n  public clear(): TrieMap<T> {\n    this.root = Object.create(null);\n    return this;\n  }\n\n  /**\n   * Insert multiple entries into the TrieMap.\n   *\n   * @param iterable - An array or other iterable that yields entries.\n   * @returns this/self (chainable)\n   *\n   * @example\n   * ```js\n   * const trie = new Trie().load([\n   *   [['some', 'path'], 'value1'],\n   *   [['other', 'path'], 'value2']\n   * ]);\n   * ```\n   */\n  public load(iterable: Iterable<[string[], T]>): TrieMap<T> {\n    for (const [prefix, value] of iterable) {\n      this.set(prefix, value);\n    }\n    return this;\n  }\n\n  /**\n   * Creates and sets an empty node at the given prefix.\n   *\n   * @param prefix - A string array.\n   */\n  protected setNode(prefix: string[]): obj {\n    let node = this.root;\n    for (let i = 0; i < prefix.length; i++) {\n      this.ensureValidKey(prefix[i]);\n      node = node[prefix[i]] || (node[prefix[i]] = Object.create(null));\n    }\n    return node;\n  }\n\n  /**\n   * Returns the node at the given prefix.\n   *\n   * @param prefix - A string array.\n   */\n  protected getNode(prefix: string[]): obj | undefined {\n    let node: obj = this.root;\n    for (let i = 0; i < prefix.length; i++) {\n      this.ensureValidKey(prefix[i]);\n      node = node[prefix[i]];\n      if (node === undefined) {\n        return;\n      }\n    }\n    return node;\n  }\n\n  /**\n   * Assigns a value to the given node.\n   *\n   * @param prefix - A string array.\n   * @param value - The value.\n   */\n  protected nodeSetValue(node: obj, value: T): void {\n    node[SENTINEL] = value;\n  }\n\n  /**\n   * Updates a value at the given node.\n   *\n   * @param prefix - A string array.\n   * @param value - The value.\n   */\n  protected nodeUpdateValue(node: obj, f: (value: T) => T): void {\n    node[SENTINEL] = f(node[SENTINEL]);\n  }\n\n  /**\n   * Gets the value at the given node.\n   *\n   * @param prefix - A string array.\n   */\n  protected nodeGetValue(node: obj): T | undefined {\n    return node[SENTINEL];\n  }\n\n  /**\n   * Deletes the value at the given node.\n   *\n   * @param prefix - A string array.\n   */\n  protected nodeDeleteValue(node: obj): boolean {\n    return Reflect.deleteProperty(node, SENTINEL);\n  }\n\n  /**\n   * Returns whether a node has a value.\n   *\n   * @param prefix - A string array.\n   */\n  protected nodeHasValue(node: obj): boolean {\n    return SENTINEL in node;\n  }\n\n  /**\n   * Insert a value into the TrieMap.\n   *\n   * @param prefix - A string array.\n   * @param value - The value to insert.\n   * @returns this/self (chainable)\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap()\n   *   .set(['some', 'path'], 'value1');\n   *   .set(['other', 'path'], 'value2');\n   * ```\n   */\n  public set(prefix: string[], value: T): TrieMap<T> {\n    this.nodeSetValue(this.setNode(prefix), value);\n    return this;\n  }\n\n  /**\n   * Updates a value in the TrieMap.\n   *\n   * @param prefix - A string array.\n   * @param f - A function that when passed the current value, will return another replacement value.\n   * @returns this/self (chainable)\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap();\n   * trie.set(['some', 'path'], 4);\n   *\n   * trie.get(['some', 'path']);\n   * //=> 4\n   *\n   * trie.update(['some', 'path'], (value) => {\n   *   return value + 2\n   * });\n   *\n   * trie.get(['some', 'path']);\n   * //=> 6\n   * ```\n   */\n  public update(prefix: string[], f: (value: T) => T): TrieMap<T> {\n    const node = this.getNode(prefix);\n    if (node) {\n      this.nodeUpdateValue(node, f);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the value at a given prefix or undefined if no node is found.\n   *\n   * @param prefix - A string array.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap();\n   * trie.set(['some', 'path'], 4);\n   *\n   * trie.get(['some', 'path']);\n   * //=> 4\n   * ```\n   */\n  public get(prefix: string[]): T | undefined {\n    const node = this.getNode(prefix);\n    if (!node) return;\n    return this.nodeGetValue(node);\n  }\n\n  /**\n   * Returns the value at a given prefix.\n   *\n   * @param prefix - A string array.\n   * @throws {Error} if there is no value at the given prefix.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap();\n   *\n   * trie.get(['nonexistent', 'path']);\n   * //=> undefined\n   *\n   * trie.getStrict(['nonexistent', 'path']);\n   * //=> throws Error\n   * ```\n   */\n  public getStrict(prefix: string[]): T {\n    const value = this.get(prefix);\n    if (!value) throw new Error('Value not found.');\n    return value;\n  }\n\n  /**\n   * Returns whether a value exists at the given prefix.\n   *\n   * @param prefix - A string array.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap();\n   *\n   * trie.has(['some', 'path']);\n   * //=> false\n   *\n   * trie.set(['some', 'path'], 'value');\n   *\n   * trie.has(['some', 'path']);\n   * //=> true\n   * ```\n   */\n  public has(prefix: string[]): boolean {\n    const node = this.getNode(prefix);\n    return !!node && this.nodeHasValue(node);\n  }\n\n  /**\n   * Deletes the value at the given prefix. Returns whether the operation was successful.\n   *\n   * @param prefix - A string array.\n   * @param prune - Whether or not to delete all values with the given prefix.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap();\n   * trie.set(['some', 'path'], 'value');\n   *\n   * trie.has(['some', 'path']);\n   * //=> true\n   *\n   * trie.delete(['some', 'path']);\n   * //=> true (means operation was successful)\n   *\n   * trie.has(['some', 'path']);\n   * //=> false\n   * ```\n   */\n  public delete(prefix: string[]): boolean {\n    let node = this.root;\n    let toPrune = null;\n    let pruneKey = null;\n    let parent;\n    for (let i = 0; i < prefix.length; i++) {\n      parent = node;\n      node = node[prefix[i]];\n      // Prefix does not exist\n      if (node === undefined) {\n        return false;\n      }\n      // Keeping track of a potential branch to prune\n      const numKeys = Object.keys(node).length;\n      if (toPrune !== null) {\n        if (numKeys > 1) {\n          toPrune = null;\n          pruneKey = null;\n        }\n      } else {\n        if (numKeys < 2) {\n          toPrune = parent;\n          pruneKey = prefix[i];\n        }\n      }\n    }\n    if (!this.nodeHasValue(node)) {\n      return false;\n    }\n    if (toPrune && pruneKey) {\n      Reflect.deleteProperty(toPrune, pruneKey);\n    } else {\n      Reflect.deleteProperty(node, SENTINEL);\n    }\n    return true;\n  }\n\n  /**\n   * Deletes the value at the given prefix or all values with the given prefix if ´prune´ is set to true.\n   *\n   * @param prefix - A string array.\n   * @param prune - Whether or not to delete all values with the given prefix.\n   * @throws {Error} if the operation was unsuccessful.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap();\n   *\n   * trie.delete(['nonexistent', 'path']);\n   * //=> false (operation unsuccessful)\n   *\n   * trie.deleteStrict(['nonexistent', 'path']);\n   * //=> throws Error\n   * ```\n   */\n  public deleteStrict(prefix: string[]): void {\n    if (!this.delete(prefix)) {\n      throw new Error('The node at the prefix not found: ' + prefix.join('/'));\n    }\n  }\n\n  /**\n   * Iterate each (value, prefix) with the given prefix.\n   *\n   * @param prefix - A string array.\n   * @param f - A callback function.\n   *\n   * @example\n   * ```js\n   * const directoryFileCounts = new TrieMap()\n   *   .set(['src', 'classes'], 2)\n   *   .set(['src', 'modules'], 6)\n   *   .set(['docs'], 8);\n   *\n   * let totalFiles = 0;\n   * directoryFileCounts.forEach([], (value, prefix) => {\n   *   totalFiles += value;\n   * });\n   * // totalFiles (2 + 6 + 8) is now = 16\n   *\n   * let totalSourceFiles = 0;\n   * directoryFileCounts.forEach(['src'], (value, prefix) => {\n   *   totalSourceFiles += value;\n   * });\n   * // totalSourceFiles (2 + 6) is now = 8\n   * ```\n   */\n  public forEach(\n    prefix: string[],\n    f: (value: T, prefix: string[]) => void,\n  ): TrieMap<T> {\n    prefix = prefix.slice();\n    (function recurse(node: obj) {\n      for (const key in node) {\n        prefix.push(key);\n        const value = node[key][SENTINEL];\n        if (value !== undefined) {\n          f(value, prefix.slice());\n        }\n        // TODO why is key !== '0' necessary?\n        if (key !== '0') recurse(node[key]);\n        prefix.pop();\n      }\n    })(this.getNode(prefix) || {});\n    return this;\n  }\n\n  /**\n   * Iterates all (value, prefix) where value === ´valueToFind´.\n   *\n   * @param prefix - A string array.\n   * @param valueToFind - The value to look for.\n   * @param f - A callback function.\n   *\n   * @example\n   * ```js\n   * const directoryFileCounts = new TrieMap()\n   *   .set(['src', 'classes'], 2)\n   *   .set(['src', 'modules'], 2)\n   *   .set(['docs'], 8);\n   *\n   * const directoryPathsWithTwoFiles = [];\n   * directoryFileCounts.find([], (value, prefix) => {\n   *   if(value === 2) {\n   *     directoryPathsWithTwoFiles.push(prefix);\n   *   }\n   * });\n   * // directoryPathsWithTwoFiles will now contain: [\n   * //   ['src', 'classes'],\n   * //   ['src', 'modules']\n   * // ]\n   * ```\n   */\n  public find(\n    prefix: string[],\n    valueToFind: T,\n    f: (value: T, prefix: string[]) => void,\n  ): TrieMap<T> {\n    this.forEach(prefix, (value, prefix) => {\n      if (value === valueToFind) {\n        f(valueToFind, prefix);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Returns an Iterable that yields each prefix in the TrieMap with the given prefix.\n   *\n   * @param prefix - A string array.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap()\n   *   .set(['src', 'classes'], 2)\n   *   .set(['src', 'modules'], 2)\n   *   .set(['docs'], 8);\n   *\n   * [...trie.keys()];\n   * //=> [\n   * //   ['src', 'classes'],\n   * //   ['src', 'modules'],\n   * //   ['docs']\n   * // ]\n   * ```\n   */\n  public *keys(prefix: string[] = []): Iterable<string[]> {\n    const res: string[][] = [];\n    this.forEach(prefix, (_, prefix) => {\n      return res.push(prefix);\n    });\n    yield* res;\n  }\n\n  /**\n   * Returns an Iterable that yields each value in the TrieMap with the given prefix.\n   *\n   * @param prefix - A string array.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap()\n   *   .set(['src', 'classes'], 2)\n   *   .set(['src', 'modules'], 2)\n   *   .set(['docs'], 8);\n   *\n   * [...trie.values()];\n   * //=> [2, 2, 8]\n   * ```\n   */\n  public *values(prefix: string[] = []): Iterable<T> {\n    const res: T[] = [];\n    this.forEach(prefix, (value: T) => {\n      return res.push(value);\n    });\n    yield* res;\n  }\n\n  /**\n   * Returns an Iterable that yields each entry ([prefix, value]) in the TrieMap with the given prefix.\n   *\n   * @param prefix - A string array.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap()\n   *   .set(['src', 'classes'], 2)\n   *   .set(['src', 'modules'], 2)\n   *   .set(['docs'], 8);\n   *\n   * [...trie.entries()];\n   * //=> [\n   * //   [['src', 'classes'], 2],\n   * //   [['src', 'modules'], 2],\n   * //   [['docs', 8]]\n   * // ]\n   * ```\n   */\n  public *entries(prefix: string[] = []): Iterable<[string[], T]> {\n    const res: Array<[string[], T]> = [];\n    this.forEach(prefix, (value, prefix) => {\n      res.push([prefix, value]);\n    });\n    yield* res;\n  }\n\n  /**\n   * Returns an Iterable that yields each entry ([prefix, value]) in the TrieMap with the given prefix.\n   *\n   * @param prefix - A string array.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap()\n   *   .set(['src', 'classes'], 2)\n   *   .set(['src', 'modules'], 2)\n   *   .set(['docs'], 8);\n   *\n   * [...trie];\n   * //=> [\n   * //   [['src', 'classes'], 2],\n   * //   [['src', 'modules'], 2],\n   * //   [['docs', 8]]\n   * // ]\n   * ```\n   */\n  public *[Symbol.iterator](prefix?: string[]): Iterable<[string[], T]> {\n    yield* this.entries(prefix);\n  }\n\n  /**\n   * Returns an Iterable that yields each entry ([prefix, value]) in the TrieMap with the given prefix.\n   *\n   * @param prefix - A string array.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap()\n   *   .set(['src', 'classes'], 2)\n   *   .set(['src', 'modules'], 2)\n   *   .set(['docs'], 8);\n   *\n   * trie.toArray();\n   * //=> [\n   * //   [['src', 'classes'], 2],\n   * //   [['src', 'modules'], 2],\n   * //   [['docs', 8]]\n   * // ]\n   * ```\n   */\n  public toArray(prefix: string[] = []): Array<[string[], T]> {\n    return [...this.entries(prefix)];\n  }\n\n  /**\n   * Returns the trie map data structure as pretty printed JSON.\n   *\n   * @param pretty - Whether to return a pretty formatted JSON string rather than a condensed machine readble string.\n   *\n   * @example\n   * ```js\n   * const trie = new TrieMap()\n   *   .set(['src', 'classes'], 2)\n   *   .set(['src', 'modules'], 2)\n   *   .set(['docs'], 8);\n   *\n   * trie.toJson();\n   * //=> \"{root:{src:{classes:2,modules:2,},docs:8,}}\"\n   *\n   * trie.toJson(true);\n   * //=> {\n   * //   root: {\n   * //     src: {\n   * //       classes: 2,\n   * //       modules: 2,\n   * //     },\n   * //     docs: 8,\n   * //   },\n   * // }\n   * ```\n   */\n  public toJson(pretty = false): string {\n    return JSON.stringify(this, null, pretty ? 2 : void 0);\n  }\n}\n\nexport default TrieMap;\n"],"names":[],"mappings":"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"}